---
globs: *.ts,*.tsx
description: TypeScript coding standards and conventions
---

# TypeScript Standards for XHS MCP

## Type Safety
- **Strict Mode**: Always use strict TypeScript configuration
- **Explicit Types**: Use explicit return types for public methods: `method(): ReturnType`
- **No Any**: Avoid `any` type - use `unknown` or specific types
- **Nullish Coalescing**: Use `??` operator instead of `||` for null/undefined checks
- **Optional Chaining**: Use `?.` operator for safe property access

## Import/Export Patterns
- **ES Modules**: Use ES module syntax (`import`/`export`)
- **Named Exports**: Prefer named exports over default exports
- **Index Files**: Use index files for clean module boundaries
- **Type Imports**: Use `import type` for type-only imports

## Interface Design
- **Consistent Naming**: Use PascalCase for interfaces (`XHSResponse`, `BrowserConfig`)
- **Generic Types**: Use generics for reusable interfaces (`XHSResponse<T>`)
- **Optional Properties**: Mark optional properties with `?`
- **Readonly**: Use `readonly` for immutable properties

## Error Handling
- **Custom Errors**: Extend `XHSError` base class for domain-specific errors
- **Error Context**: Include context objects with error information
- **Type-Safe Errors**: Use specific error types (`AuthenticationError`, `BrowserError`)

## Service Patterns
- **Base Service**: All services extend `BaseService`
- **Dependency Injection**: Inject dependencies via constructor
- **Protected Methods**: Use `protected` for internal service methods
- **Abstract Classes**: Use abstract base classes for common functionality

## Code Organization
- **Single Responsibility**: One class/service per file
- **Co-location**: Keep related types and implementations together
- **Barrel Exports**: Use index files for clean imports
- **File Naming**: Use kebab-case for files (`auth.service.ts`, `browser.manager.ts`)

## Async Patterns
- **Async/Await**: Prefer async/await over Promises
- **Error Propagation**: Let errors bubble up naturally
- **Timeout Handling**: Use proper timeout configurations
- **Resource Cleanup**: Ensure proper cleanup in finally blocks

## Documentation
- **JSDoc Comments**: Document public APIs with JSDoc
- **Type Comments**: Add comments for complex type definitions
- **Examples**: Include usage examples in documentation