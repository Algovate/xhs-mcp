---
globs: *.ts,*.tsx
---

# TypeScript Standards for XHS MCP

**This project is TypeScript-first** - All development should prioritize TypeScript best practices and type safety.

## Code Style & Standards

- **Always use semicolons** - This project enforces semicolon usage
- **Use strict TypeScript** - Enable strict mode with proper type annotations
- **Type everything** - Avoid `any` type, use proper type definitions
- **ES2022 target** - Target modern JavaScript features
- **ESNext modules** - Use ES modules with `.js` extensions in imports
- **Prefer interfaces over types** - Use interfaces for object shapes, types for unions/primitives
- **Explicit return types** - Always specify return types for functions
- **Generic types** - Use generics for reusable, type-safe code

## Import/Export Patterns

```typescript
// Use .js extensions for compiled output
import { XHSMCPServer } from './server/mcp.server.js';
import { getConfig } from '../lib/shared/config.js';

// Prefer named exports over default exports
export { XHSMCPServer };
export function getConfig(): Config { ... }
```

## Error Handling

- **Use custom error classes** - Extend base Error class for specific error types
- **Always handle async operations** - Use try/catch with async/await
- **Provide context in errors** - Include operation context and relevant data

## Service Architecture

- **Singleton pattern for config** - Use ConfigManager.getInstance()
- **Dependency injection** - Pass dependencies through constructors
- **Async service methods** - All service operations should be async
- **Consistent response format** - Use XHSResponse<T> interface for all responses

## Type Definitions

- **Centralized types** - Define all types in [src/lib/shared/types.ts](mdc:src/lib/shared/types.ts)
- **Interface naming** - Use PascalCase with descriptive names (e.g., `XHSResponse`, `BrowserConfig`)
- **Generic types** - Use generics for reusable response types
- **Optional properties** - Use `?` for optional properties, avoid `undefined` in unions